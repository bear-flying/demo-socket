<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/mvc
						http://www.springframework.org/schema/mvc/spring-mvc.xsd
						http://code.alibabatech.com/schema/dubbo
						http://code.alibabatech.com/schema/dubbo/dubbo.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context.xsd
                     http://www.springframework.org/schema/security
                     http://www.springframework.org/schema/security/spring-security.xsd">

    <!--配置哪些资源匿名可以访问（不需要进行权限校验、不登录也可以访问）-->
    <!--<security:http security="none" pattern="/pages/a.html"></security:http>
    <security:http security="none" pattern="/pages/b.html"></security:http>
    <security:http security="none" pattern="/pages/**"></security:http>-->
    <!--指定login.html页面可以匿名访问-->
    <security:http security="none" pattern="/login.html"></security:http>


    <!--
        http：用于定义相关权限控制（其实就是在描述过滤器的配置）
        auto-config：是否自动配置
            设置为true时框架会提供默认的一些配置，例如提供默认的登录页面、登出处理等
            设置为false时需要显示提供登录表单配置，否则会报错
        use-expressions：用于指定intercept-url中的access属性是否使用表达式
            即是否使用spring security提供的表达式来描述权限
    -->
    <security:http auto-config="true" use-expressions="true">
        <!--
            pattern:描述拦截规则
            asscess:指定所需的访问角色或者访问权限
            intercept-url：定义一个拦截规则
            pattern：对哪些url进行权限控制
            access：用于指定表达式描述权限，只有当use-expressions值为true的时候才可以使用
                作用是在请求对应的URL时需要什么权限，默认配置时它应该是一个以逗号分隔的角色列
                表，请求的用户只需拥有其中的一个角色就能成功访问对应的URL，
        -->
        <!--只要认证通过就可以访问-->
        <security:intercept-url pattern="/pages/a.html"  access="isAuthenticated()" />

        <!--拥有add权限就可以访问b.html页面-->
        <security:intercept-url pattern="/pages/b.html"  access="hasAuthority('add')" />

        <!--拥有ROLE_ADMIN角色就可以访问c.html页面-->
        <security:intercept-url pattern="/pages/c.html"  access="hasRole('ROLE_ADMIN')" />

        <!--拥有ROLE_ADMIN角色就可以访问d.html页面，
            注意：此处虽然写的是ADMIN角色，框架会自动加上前缀ROLE_-->
        <security:intercept-url pattern="/pages/d.html"  access="hasRole('ADMIN')" />

        <!--配置拦截规则，被拦截到就会跳转到登录页面，/**表示拦截所有请求，如果是/*就只能拦截一层目录的请求-->
        <security:intercept-url pattern="/**" access="hasRole('ROLE_ADMIN')"></security:intercept-url>


        <!--如果我们不使用Spring Security提供的默认登录页面
            要使用自己指定的页面作为登录页面，必须配置登录表单.
            这个登录方法login.do不用我们自己写Controller 页面提交的登录表单请求是由框架负责处理-->
        <!--login-page: 指定登录页面访问的URL-->
        <security:form-login
                login-page="/login.html"
                username-parameter="username"
                password-parameter="password"
                login-processing-url="/login.do"
                default-target-url="/index.html"
                authentication-failure-url="/login.html"></security:form-login>
        <!--
          csrf：对应CsrfFilter过滤器
          disabled：是否启用CsrfFilter过滤器，如果使用自定义登录页面需要关闭此项，否则登录操作会被禁用（403）
          原理：提交用户请求的时候，除了用户名和密码，还提交了一个_csrf属性（框架在我们登陆之前，随机的字符串），
          提交登陆的时候会经过csrf过滤器，csrf过滤器用于比对提交的字符串与内存中的是否一致，
          以此来确定这个提交页面是不是框架的（是不是安全的）
        -->
        <security:csrf disabled="true"></security:csrf>

        <!--
          logout：退出登录
          logout-url：退出登录操作对应的请求路径 logout.do方法不用我们来写 由框架自动实现包括清理session
          logout-success-url：退出登录后的跳转页面
        -->
        <security:logout logout-url="/logout.do"
                         logout-success-url="/login.html" invalidate-session="true"/>

    </security:http>



    <!--
        配置认证管理器
        authentication-manager：认证管理器，用于处理认证操作
    -->
    <security:authentication-manager>
        <!--
            配置认证提供者
            authentication-provider：认证提供者，执行具体的认证逻辑
        -->
        <security:authentication-provider user-service-ref="userService2">
            <!--
            配置一个具体的用户，不常用，一般需要从数据库查询用户 | {noop}是固定标识符，用来表示明文密码。
            <security:user-service>
                <security:user name="admin" password="{noop}1234" authorities="ROLE_ADMIN"/>
            </security:user-service>
            -->
            <!--指定度密码进行加密的对象-->
            <security:password-encoder ref="passwordEncoder"></security:password-encoder>
        </security:authentication-provider>
    </security:authentication-manager>

    <!-- 我们编写UserService 并按照spring security框架的要求实现了UserDetailsService接口
         框架会调用UserService的loadUserByUsername方法查询用户信息 -->
    <bean id="userService" class="com.itheima.service.SpringSecurityUserService"></bean>
    <bean id="userService2" class="com.itheima.service.SpringSecurityUserService2"></bean>
    <!--配置密码加密对象-->
    <bean id="passwordEncoder"
          class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

    <!--开启spring注解使用-->
    <context:annotation-config></context:annotation-config>

    <mvc:annotation-driven></mvc:annotation-driven>
    <context:component-scan base-package="com.itheima.controller"></context:component-scan>

    <!--开启Spring Security的注解方式权限控制
        把权限控制精确到Controller中的每一个方法上-->
    <security:global-method-security pre-post-annotations="enabled" />
</beans>